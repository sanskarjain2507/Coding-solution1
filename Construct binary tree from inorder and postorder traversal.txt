/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    
    TreeNode* findT(vector<int>& postorder,vector<int>& inorder,int left,int right,unordered_map<int,int> &post_m,unordered_map<int,int> &ino_m)
    {
        if(left>right)
            return NULL;
 
            
        int r=0;
        for(int j=left;j<=right;j++)
        {
            if(post_m[inorder[j]]>r)
            {
                r=post_m[inorder[j]];

            }
        }
        int j=ino_m[postorder[r]];
        TreeNode* root=new TreeNode();
        root->val=postorder[r];
        root->left=findT(postorder,inorder,left,j-1,post_m,ino_m);
        root->right=findT(postorder,inorder,j+1,right,post_m,ino_m);
        return root;
 
    }
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        TreeNode* root=new TreeNode();
        unordered_map<int,int> post_m;
        unordered_map<int,int> ino_m;
        
        for(int i=0;i<postorder.size();i++)
        {
            post_m[postorder[i]]=i;
            ino_m[inorder[i]]=i;
        }
        
        root->val=postorder[postorder.size()-1];
      
        int r=ino_m[root->val];
        
        root->left=findT(postorder,inorder,0,r-1,post_m,ino_m);
        root->right=findT(postorder,inorder,r+1,inorder.size()-1,post_m,ino_m);
        
        return root;
        
        
       
    }
};
