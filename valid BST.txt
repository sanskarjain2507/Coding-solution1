/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    
    bool isValidBST1(TreeNode* root ,long left=LONG_MIN,long right=LONG_MAX)
    {
        if(root==NULL)
            return 1;
        
        if(root->val>left && root->val<right)
        {
            return isValidBST1(root->left,left,root->val) && isValidBST1(root->right,root->val,right);
            
        }
        else 
            return 0;
        
        
    }
    
     bool isValidBST(TreeNode* root)
     {
         
         //in this question pass range in left and right and check if the values are in between the 
         //ranges or not, if not return false elese retrun true
         
         if(root==NULL)
             return 1;
         return isValidBST1(root->left,LONG_MIN,root->val) && isValidBST1(root->right,root->val,LONG_MAX);
     }
//     void FindInorder(TreeNode* root,vector<int> &inorder)
//     {
//         if(root==NULL)
//             return;
        
//         FindInorder(root->left,inorder);
//         inorder.push_back(root->val);
//         FindInorder(root->right,inorder);
//     }
//     bool isValidBST(TreeNode* root) {
//         vector<int> inorder;
    
//         FindInorder(root,inorder);
        
//         for(int i=0;i<inorder.size()-1;i++)
//             if(inorder[i]>=inorder[i+1])
//                 return 0;
//         return 1;
        
        
        
//     }
};