/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void findpostorder(TreeNode* root,vector<int> &ans)
    {
        if(root==NULL)
            return;
        
        findpostorder(root->left,ans);
        findpostorder(root->right,ans);
        ans.push_back(root->val);
    }
    vector<int> postorderTraversal(TreeNode* root) {
        
        vector<int> ans;
        
        stack<TreeNode*> st;
        
        if(root!=NULL)
            st.push(root);
        
        TreeNode* prev=NULL;
        while(!st.empty())
        {
            TreeNode* temp=st.top();
            
            
            if(temp->left==NULL && temp->right==NULL)
            {
                ans.push_back(temp->val);
                st.pop();
                prev=temp;
                continue;
            }    
            
            if(temp->right==NULL && temp->left==prev)
            {
                ans.push_back(temp->val);
                st.pop();
                prev=temp;
                continue;   
            }
            
            if(prev!=NULL && temp->right==prev)
            {
                ans.push_back(temp->val);
                st.pop();
                prev=temp;
                continue;
            }
            
            if(temp->left==NULL && temp->right!=NULL && temp->right!=prev)
            {
                st.push(temp->right);
                continue;
            }
            if(temp->left==prev)
            {
                if(temp->right!=NULL)
                {
                    st.push(temp->right);
                    
                }
                continue;
               
            }
            
            if(temp->left!=NULL)
                st.push(temp->left);
                
            
            
            
        }
        return ans;
    }
};