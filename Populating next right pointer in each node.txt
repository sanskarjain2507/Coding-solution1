/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        
        queue<pair<Node*,int>> q;
        
        if(root==NULL)
            return NULL;
        
        q.push(make_pair(root,0));
        
        while(!q.empty())
        {
            pair<Node*,int> p=q.front();
            q.pop();
            
            
            if(!q.empty() && q.front().second==p.second)
            {
                (p.first)->next=q.front().first;
            }
            else
                (p.first)->next=NULL;
            
            if(p.first->left!=NULL)
                q.push(make_pair(p.first->left,p.second+1));
            
             if(p.first->right!=NULL)
                q.push(make_pair(p.first->right,p.second+1));
            
            
        }
        return root;
    }
};