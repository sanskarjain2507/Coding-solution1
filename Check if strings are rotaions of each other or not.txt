// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends

class Solution
{
    public:
    //Function to check if two strings are rotations of each other or not.
    
    void calculateKMP(string &s,vector<int> &KMP,int &l)
    {
        
        int i=1;
        int l1=0;
        
        while(i<l)
        {
            if(s[i]==s[l1])
            {
                l1++;
                KMP[i]=l1;
                i++;
            }
            else if(l1==0)
            {
                // if(s[i]==s[0])
                // {
                //     l1++;
                //     KMP[i]=l1;
                //     i++;
                // }
                // else
                    i++;
            }
            else
            {
                l1--;
            }
        }
    }
    
    
    bool areRotations(string s1,string s2)
    {
        if(s1.length() != s2.length())
            return 0;
            
       //join s1+s1 and then check if s2 is substring of it or not using KMP
       s1=s1+s1;
       
       int l1=s1.length();
       int l2=s2.length();
       vector<int> KMP(l1,0);
       
       calculateKMP(s2,KMP,l2);
        
        int j=-1;
        for(int i=0;i<l1;)
        {
            if(s1[i]==s2[j+1])
            {
                i++;
                j++;
                if(j==l2-1)
                    return 1;
            }
            else if(j==-1)
            {
                i++;
            }
            else
            {
                j=KMP[j]-1;
            }
        }
        return 0;
        
    
    }
};

// { Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        string s1;
        string s2;
        cin>>s1>>s2;
        Solution obj;
        cout<<obj.areRotations(s1,s2)<<endl;

    }
    return 0;
}
  // } Driver Code Ends