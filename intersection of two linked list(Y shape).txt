/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        
        //if firstnode is intersection point then return 1st node
        if(headA==headB)
            return headA;
        ListNode* temp=headA;
        while(temp->next!=NULL)
            temp=temp->next;
        
        //else join the end of 1st node to start of 2nd loop and then detect htne starting point of loop and return that if loop exist otherwise return NULL
        ListNode* lastnode=temp;
        temp->next=headB;
        
        ListNode* temp1=headA->next;
        ListNode* temp2=headA;
      
         temp2=temp2->next;
        if(temp2==NULL)
        {
            lastnode->next=NULL;
            return NULL;
        }
        temp2=temp2->next;
        if(temp2==NULL)
        {
            lastnode->next=NULL;
            return NULL;
        }
        if(temp1==NULL)
        {
            lastnode->next=NULL;
            return NULL;
        }
        while(temp1!=temp2)
        {
            // cout<<"a";
            temp1=temp1->next;
            temp2=temp2->next;
            if(temp2==NULL)
            {
                lastnode->next=NULL;
                return NULL;
            }
            temp2=temp2->next;
            if(temp2==NULL)
            {
                lastnode->next=NULL;
                return NULL;
            }
            
        }
        // cout<<temp1->val<<" "<<temp2->val<<" ";
        temp1=headA;
        
        while(temp1!=temp2)
        {
            // cout<<temp1->val<<" "<<temp2->val<<" ";
            // cout<<"b";
            temp1=temp1->next;
            temp2=temp2->next;
        }
        
        lastnode->next=NULL;
        return temp1;
        
    }
};