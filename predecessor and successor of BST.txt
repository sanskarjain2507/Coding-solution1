// { Driver Code Starts
// C++ program to find predecessor and successor in a BST
#include <iostream>
using namespace std;

// BST Node
struct Node
{
	int key;
	struct Node *left;
	struct Node *right;
	
	Node(int x){
	    key = x;
	    left = NULL;
	    right = NULL;
	}
};

int key=0;
// This function finds predecessor and successor of key in BST.
// It sets pre and suc as predecessor and successor respectively
void findPreSuc(Node* root, Node*& pre, Node*& suc, int key);

 void insert(struct Node *root,int n1,int n2,char lr)
 {
     if(root==NULL)
        return;
     if(root->key==n1)
     {
         switch(lr)
         {
          case 'L': root->left=new Node(n2);
                    break;
          case 'R': root->right=new Node(n2);
                    break;
         }
     }
     else
     {
         insert(root->left,n1,n2,lr);
         insert(root->right,n1,n2,lr);
     }
 }
// Driver program to test above functions
int main()
{
    /* Let us construct the tree shown in above diagram */
    int t,k;
    cin>>t;
    while(t--)
    {
    int n;
    cin>>n;
    struct Node *root=NULL;
    Node *pre=NULL;
    Node *suc=NULL;
    while(n--)
    {
        char lr;
        int n1,n2;
        cin>>n1>>n2;
        cin>>lr;
        if(root==NULL)
        {
            root=new Node(n1);
            switch(lr){
                    case 'L': root->left=new Node(n2);
                    break;
                    case 'R': root->right=new Node(n2);
                    break;
                    }
        }
        else
        {
            insert(root,n1,n2,lr);
        }
    }
   // Inorder(root);
    //Node * target =ptr;
    //printkdistanceNode(root, target, k);
    //cout<<endl;
    cin>>key;
    findPreSuc(root, pre, suc, key);
	if (pre != NULL)
	cout << pre->key;
	else
	cout << "-1";

	if (suc != NULL)
	cout <<" "<<suc->key<<endl;
	else
	cout << " "<<"-1"<<endl;
    }
	return 0;
}// } Driver Code Ends


/* BST Node
struct Node
{
	int key;
	struct Node *left, *right;
};
*/

// This function finds predecessor and successor of key in BST.
// It sets pre and suc as predecessor and successor respectively

int f1,f2;
// Node* prev;
#include<bits/stdc++.h>
void findp(Node* root,vector<Node*> &ans)
{
    if(root==NULL)
        return;
    findp(root->left,ans);
    ans.push_back(root);
    
    findp(root->right,ans);
   
    
}

void findsuc(Node* root,Node* &suc,int &key)
{
    while(root!=NULL)
    {
        if(root->key>key)
        {
            suc=root;
            root=root->left;
        }
        else
        {
            root=root->right;
        }
    }
}

void findpre(Node* root,Node* &pre,int &key)
{
    while(root!=NULL)
    {
        if(root->key<key)
        {
            pre=root;
            root=root->right;
        }
        else
        {
            root=root->left;
        }
    }
}

void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
{

  
   suc=NULL;
   pre=NULL;
   findsuc(root,suc,key);
   findpre(root,pre,key);
//   cout<<suc->key<<" ";

    // vector<Node*> ans;
    // findp(root,ans);
    
    // pre=NULL;
    // suc=NULL;
    // for(int i=0;i<ans.size();i++)
    // {
    //     if(ans[i]->key==key)
    //     {
    //         if(i>0)
    //             pre=ans[i-1];
            
    //         if(i<ans.size()-1)
    //             suc=ans[i+1];
    //         break;
    //     }
        
    //     if(i+1<ans.size() && ans[i]->key<key && ans[i+1]->key>key)
    //     {
    //         pre=ans[i];
    //         suc=ans[i+1];
    //         break;
            
    //     }
        
    // }
    // if(pre==NULL && suc==NULL)
    //     pre=ans[ans.size()-1];
// Your code goes here

}