class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int maxbananas=piles[0];
        int minbananas=1;
        int s=piles.size();
        
        for(int i=0;i<s;i++)
        {
            if(piles[i]>maxbananas)
                maxbananas=piles[i];
        }
        
        int low=minbananas;
        int high=maxbananas;
        
        while(low<=high)
        {
            
            int mid=(low+high)>>1;
            
            
            long long c=0; //c will store total time to eat bananas if koko can eat mid bananas in 1 hour
            
            for(int i=0;i<s;i++)
            {
                if(piles[i]<mid)
                    c+=1;
                else if(piles[i]%mid)
                {
                    c=c+(piles[i]/mid)+1;
                }
                else
                    c=c+piles[i]/mid;
                
            }
            // cout<<mid<<" "<<low<<" "<<high<<" "<<c<<"\n";
            
            if(c==(long long)h)
            {
                high=mid-1;
            }
            else if(c>(long long)h)
            {
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }
        return low;
    }
};