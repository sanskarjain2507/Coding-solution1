// { Driver Code Starts
// Program to find minimum number of platforms
// required on a railway station
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution{
    public:
    //Function to find the minimum number of platforms required at the
    //railway station such that no train waits.
    
    
    void swap(int arr[],int i,int j)
    {
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }
    
    void heapify(int arr[],int i,int s)
    {
        int left=i*2+1;
        int right=i*2+2;
        int maxm;
        
        if(left<s && arr[left]>arr[i])
            maxm=left;
        else
            maxm=i;
        
        if(right<s && arr[right]>arr[maxm])
            maxm=right;
        
        if(i!=maxm)
        {
            swap(arr,i,maxm);
            heapify(arr,maxm,s);
        }
    }
    
    void buildheap(int arr[],int s)
    {
        for(int i=s/2;i>=0;i--)
            heapify(arr,i,s);
    }
    
    void heapsort(int arr[],int s)
    {
        buildheap(arr,s);
        
        while(s--)
        {
            swap(arr,0,s);
            heapify(arr,0,s);
        }
    }
    int findPlatform(int arr[], int dep[], int n)
    {
        /*
        Just sort both the arrival and departure array.Now when any train arrives
        increment the platform count and when any train depart decrement the platform count .
        Also maintain the value of maximum count and return that. 
        */
        heapsort(arr,n);
        heapsort(dep,n);
        
        // for(int i=0;i<n;i++)
        //     cout<<arr[i]<<" ";
        int i=0;
        int j=0;
        
        int overlapping_trains=0;
        int req_platform=0;
        while(i!=n)
        {
            if(arr[i]<=dep[j])
            {
                overlapping_trains+=1;
                req_platform=max(req_platform,overlapping_trains);
                i++;
            }
            else
            {
                overlapping_trains-=1;
                j++;
            }
            
        }
        return req_platform;
    	// Your code here
    }
};


// { Driver Code Starts.
// Driver code
int main()
{
    int t;
    cin>>t;
    while(t--) 
    {
        int n;
        cin>>n;
        int arr[n];
        int dep[n];
        for(int i=0;i<n;i++)
            cin>>arr[i];
        for(int j=0;j<n;j++){
            cin>>dep[j];
        }
        Solution ob;
        cout <<ob.findPlatform(arr, dep, n)<<endl;
    } 
   return 0;
}  // } Driver Code Ends