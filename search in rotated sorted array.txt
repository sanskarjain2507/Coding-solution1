class Solution {
public:
    
    int findpoint(vector<int> &nums,int left,int right,int s)
    {
        if(left>right)
            return -1;
            
        int mid=(left+right)/2;
        
        
        if(mid==left && nums[mid]>nums[mid+1])
            return mid+1;
        else if(mid==left && nums[mid]<nums[mid+1])
            return -1;
        
        if(mid==right && nums[mid]<nums[mid-1])
                return mid;
        else if(mid==right && nums[mid]>nums[mid-1])
                return -1;
        
        if(nums[mid]>nums[mid+1])
            return mid+1;
        
        int l=findpoint(nums,left,mid,s);
        int r=findpoint(nums,mid+1,right,s);
        
        if(l!=-1)
            return l;
        return r;
    }
    
    int binsrch(vector<int> &nums,int left,int right,int &target)
    {
        if(left>right)
            return -1;
        
        int mid=(left+right)/2;
        
        if(nums[mid]==target)
            return mid;
        
        if(nums[mid]<target)
            return binsrch(nums,mid+1,right,target);
        else
            return binsrch(nums,left,mid-1,target);
    }
    
    int search(vector<int>& nums, int target) {
        int s=nums.size();
        
        if(s==1)
        {
            if(nums[0]==target)
                return 0;
            else
                return -1;
        }
        int rotationpoint=findpoint(nums,0,s-1,s);
        
        if(rotationpoint==-1)
        {
            return binsrch(nums,0,s-1,target);
        }
        else
            return max(binsrch(nums,0,rotationpoint-1,target),binsrch(nums,rotationpoint,s-1,target));
        
    }
};