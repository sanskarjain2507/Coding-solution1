//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution{
public:

    int findknap(int N,int W,int val[],int wt[],vector<vector<int>> &t)
    {
         
        if(N==0 || W==0)
            return 0;
        
        if(t[W][N]!=-1)
            return t[W][N];
            
        if(wt[N-1]<=W)
            t[W][N]=max(val[N-1]+findknap(N,W-wt[N-1],val,wt,t),findknap(N-1,W,val,wt,t));
        else
            t[W][N]= findknap(N-1,W,val,wt,t);
        return t[W][N];
    }   
    int knapSack(int N, int W, int val[], int wt[])
    {
       
        
        vector<vector<int>> t;
        
        for(int i=0;i<W+1;i++)
        {
            vector<int> temp(N+1,-1);
            t.push_back(temp);
        }
        
        return findknap(N,W,val,wt,t);
       
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N, W;
        cin>>N>>W;
        int val[N], wt[N];
        for(int i = 0;i < N;i++)
            cin>>val[i];
        for(int i = 0;i < N;i++)
            cin>>wt[i];
        
        Solution ob;
        cout<<ob.knapSack(N, W, val, wt)<<endl;
    }
    return 0;
}
// } Driver Code Ends