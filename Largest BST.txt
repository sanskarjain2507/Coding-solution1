//{ Driver Code Starts
//Initial Template for C++


#include <bits/stdc++.h>
using namespace std;
#define MAX_HEIGHT 100000

// Tree Node
struct Node {
    int data;
    Node* left;
    Node* right;
};

// Utility function to create a new Tree Node
Node* newNode(int val) {
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;

    return temp;
}


// Function to Build Tree
Node* buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N') return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;) ip.push_back(str);

    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size()) break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


// } Driver Code Ends
/* Tree node structure  used in the program

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};*/

class Solution{
    public:
    /*You are required to complete this method */
    // Return the size of the largest sub-tree which is also a BST
    int maxm=0;
    
        
    void maxBst(Node* root,vector<int> &temp)
    {   
        if(root->left==NULL && root->right==NULL)
        {
            temp[0]=1;
            temp[3]=1;
            temp[1]=root->data;
            temp[2]=root->data;
            maxm=max(maxm,temp[3]);
            return;
        }
       
        
        vector<int> temp1;
        if(root->left!=NULL)
        {
            maxBst(root->left,temp);
            temp1=temp;
            
        }
        
        if(root->right!=NULL)
        {
            maxBst(root->right,temp);
        }
        
        if(root->left!=NULL && root->right!=NULL)
        {
       
            if(temp1[0] && temp[0])
            {
                if(root->data>temp1[1] && root->data<temp[2])
                {
                    maxm=max(maxm,temp1[3]+temp[3]+1);
                    temp[3]=temp1[3]+temp[3]+1;
                    temp[2]=temp1[2];
                }
                else
                {
                    temp[0]=0;
                }
                
            }
            else
                temp[0]=0;
            return;
            
        }
        
        
        if(root->left!=NULL)
        {
            if(temp1[0])
            {
                if(root->data>temp1[1])
                {
                    temp[3]=temp1[3]+1;
                    temp[1]=root->data;
                    maxm=max(temp[3],maxm);
                }
                else
                    temp[0]=0;
            }
            else
                temp[0]=0;
            return;
        }
        
        if(root->right!=NULL)
        {
            if(temp[0])
            {
                if(root->data<temp[2])
                {
                    temp[3]=temp[3]+1;
                    temp[2]=root->data;
                    maxm=max(temp[3],maxm);
                }
                else
                    temp[0]=0;
            }
            else
                temp[0]=0;
        }
        
        
            
    }
    int largestBst(Node *root)
    {
        
        vector<int> temp({1,0,0,0});
        
         maxm=0;
        //1st parameter is if its valid BST or not
        //2nd parameter is maxm
        //3rd parameter is minm
        //4th parameter is sum
        
        maxBst(root,temp);
        return maxm;
    	//Your code here
    }
};

//{ Driver Code Starts.

/* Driver program to test size function*/

  

int main() {

   
    int t;
    scanf("%d ", &t);
    while (t--) {
        string s, ch;
        getline(cin, s);
        
        Node* root = buildTree(s);
        Solution ob;
        cout << ob.largestBst(root) << endl;
    }
    return 0;
}

// } Driver Code Ends


