/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxm;
    
    
    void maxBst(TreeNode* root,vector<int> &temp)
    {   
        if(root->left==NULL && root->right==NULL)
        {
            temp[0]=1;
            temp[3]=root->val;
            temp[1]=root->val;
            temp[2]=root->val;
            maxm=max(maxm,temp[3]);
            return;
        }
       
        
        vector<int> temp1;
        if(root->left!=NULL)
        {
            maxBst(root->left,temp);
            temp1=temp;
            
        }
        
        if(root->right!=NULL)
        {
            maxBst(root->right,temp);
        }
        
        if(root->left!=NULL && root->right!=NULL)
        {
       
            if(temp1[0] && temp[0])
            {
                if(root->val>temp1[1] && root->val<temp[2])
                {
                    maxm=max(maxm,temp1[3]+temp[3]+root->val);
                    temp[3]=temp1[3]+temp[3]+root->val;
                    temp[2]=temp1[2];
                }
                else
                {
                    temp[0]=0;
                }
                
            }
            else
                temp[0]=0;
            return;
            
        }
        
        
        if(root->left!=NULL)
        {
            if(temp1[0])
            {
                if(root->val>temp1[1])
                {
                    temp[3]=temp1[3]+root->val;
                    temp[1]=root->val;
                    maxm=max(temp[3],maxm);
                }
                else
                    temp[0]=0;
            }
            else
                temp[0]=0;
            return;
        }
        
        if(root->right!=NULL)
        {
            if(temp[0])
            {
                if(root->val<temp[2])
                {
                    temp[3]=temp[3]+root->val;
                    temp[2]=root->val;
                    maxm=max(temp[3],maxm);
                }
                else
                    temp[0]=0;
            }
            else
                temp[0]=0;
        }
        
        
            
    }
    int maxSumBST(TreeNode* root) {
        vector<int> temp({1,0,0,0});
        maxm=0;
        //1st parameter is if its valid BST or not
        //2nd parameter is maxm
        //3rd parameter is minm
        //4th parameter is sum
        
        maxBst(root,temp);
        return maxm;
        
    }
};