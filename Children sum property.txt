/*************************************************************

    Following is the Binary Tree node structure

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode < T > *left;
        BinaryTreeNode < T > *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

*************************************************************/
int maxm;

void postorder(BinaryTreeNode<int>* root)
{
    if(root==NULL)
        return;
    postorder(root->left);
    postorder(root->right);
    if(root->left!=NULL && root->right!=NULL)
    {
       root->data=(root->left->data+root->right->data);
    }
    else if(root->left!=NULL && root->right==NULL)
    {
        root->data=root->left->data;
        
    }
    else if(root->right!=NULL && root->left==NULL)
    {
        root->data=root->right->data;

    }
    else
        root->data=maxm;
        
    
}

void printT(BinaryTreeNode<int> * root)
{
    queue<BinaryTreeNode<int>*> q;
    
    q.push(root);
    
    while(!q.empty())
    {
        BinaryTreeNode<int>* temp=q.front();
        q.pop();
        if(temp->data>maxm)
            maxm=temp->data;

        
        if(temp->left!=NULL)
            q.push(temp->left);
        
        if(temp->right!=NULL)
            q.push(temp->right);
    }

}

void changeTree(BinaryTreeNode < int > * root) {
    // Write your code here.
    maxm=0;
    if(root==NULL)
        return;
    printT(root); //find maxm value in tree
    postorder(root);
    
}  