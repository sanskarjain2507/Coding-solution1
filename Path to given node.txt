/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 
void findp(TreeNode* root,int B,vector<int> &ans,int &f)
{
    if(f==1)
        return;
    
    if(root->val==B)
    {
        ans.push_back(B);
        f=1;
        return;
    }
    
    if(root->left!=NULL)
    {
        findp(root->left,B,ans,f);
    }
    if(f==1)
    {
        ans.push_back(root->val);
        // f=1;
        return;
    }
    
     if(root->right!=NULL)
    {
        findp(root->right,B,ans,f);
    }
    if(f==1)
    {
        ans.push_back(root->val);
        // f=1;
        return;
    }
}
vector<int> Solution::solve(TreeNode* A, int B) {
    vector<int> ans;
    int f=0;
    findp(A,B,ans,f);
    reverse(ans.begin(),ans.end());
    return ans;
}
