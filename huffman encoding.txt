// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
	public:
	    
	    struct node{
	        node* left; 
	        char c;
	        int freq;
	        node* right;
	    };
	    
	    void swap(vector<node*> &v,int i,int j)
	    {
	        node* temp=new node();
	        temp=v[i];
	        v[i]=v[j];
	        v[j]=temp;
	       
	    }
	    
	    void heapify(vector<node*> &v,int i,int s)
	    {
	        int left=i*2+1;
	        int right=i*2+2;
	        int minm;
	        
	        if(left<s && v[left]->freq<v[i]->freq)
	            minm=left;
	        else
	            minm=i;
	       
	       if(right<s && v[right]->freq<v[minm]->freq)
	            minm=right;
	            
	       if(i!=minm)
	       {
	           swap(v,i,minm);
	           heapify(v,minm,s);
	       }
	    }
	    
	    //for deletion we need to push the most recent element to bottom so we push it until that element is >= to its childs
	    void heapify1(vector<node*> &v,int i,int s)
	    {
	        int left=i*2+1;
	        int right=i*2+2;
	        int minm;
	        
	        if(left<s && v[left]->freq<=v[i]->freq)
	            minm=left;
	        else
	            minm=i;
	       
	       if(right<s && v[right]->freq<=v[minm]->freq)
	            minm=right;
	            
	       if(i!=minm)
	       {
	           swap(v,i,minm);
	           heapify1(v,minm,s);
	       }
	    }
	    
	    void buildheap(vector<node*> &v,int s)
	    {
	        for(int i=s/2;i>=0;i--)
	        {
	            heapify(v,i,s);
	        }
	    }
	    
	    int parent(int i)
	    {
	        if(i%2)
	        {
	            return i/2;
	        }
	        else
	            return i/2-1;
	    }
	    
	    void insert(vector<node*> &v,int &s,node* n)
	    {
	        v.push_back(n);
	        s++;
	        
	        int i=s-1;
	        while(i>0 && v[parent(i)]->freq>n->freq)
	        {
	            swap(v,i,parent(i));
	            i=parent(i);
	        }
	    }
	    
	    node* delete_node(vector<node*> &v,int &s)
	    {
	        node* temp=v[0];
	        s--;
	        swap(v,0,s);
	        auto it=v.end();
	        it--;
	        v.erase(it);
	        heapify1(v,0,s);
	        return temp;
	    }
	    
	    void preorder(node* n,vector<string> &ans,string &s)
	    {
	       
	       
	       if(n->c!='0')
	       {
	           ans.push_back(s);
	   
	            return;
	       }
	        s+='0';
	        preorder(n->left,ans,s);
	        s.pop_back();
	        s+='1';
	        preorder(n->right,ans,s);
	        s.pop_back();
	        
	    }
	    
		vector<string> huffmanCodes(string S,vector<int> f,int N)
		{
		    vector<node*> v;
		    for(int i=0;i<N;i++)
		    {
		        node* n=new node();
		        n->left=NULL;
		        n->c=S[i];
		        n->freq=f[i];
		        n->right=NULL;
		        v.push_back(n);
		    }
		    
		    buildheap(v,N);
		    
		
		    
		    
		    while(N>1)
		    {
		        node* n1=new node();
		        n1->left=delete_node(v,N);
		        n1->right=delete_node(v,N);
		        n1->freq=n1->left->freq+n1->right->freq;
		        n1->c='0';
		      //  cout<<n1->left->freq<<" "<<n1->left->c<<" "<<n1->right->freq<<" "<<n1->right->c<<" "<<n1->freq<<" "<<n1->c<<"\n";
		        insert(v,N,n1);
		        
		    }
	       //for(int i=0;i<N;i++)
	       // cout<<v[i]->freq<<" "<<v[i]->c<<" ";
		    
		    vector<string> ans;
		    string s="";
		    preorder(v[0],ans,s);
		    return ans;
		}
};

// { Driver Code Starts.
int main(){
    int T;
    cin >> T;
    while(T--)
    {
	    string S;
	    cin >> S;
	    int N = S.length();
	    vector<int> f(N);
	    for(int i=0;i<N;i++){
	        cin>>f[i];
	    }
	    Solution ob;
	    vector<string> ans = ob.huffmanCodes(S,f,N);
	    for(auto i: ans)
	    	cout << i << " ";
	    cout << "\n";
    }
	return 0;
}  // } Driver Code Ends