/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        
        if(head==NULL || k==0) //if k==0 or head is NULL then just return head
            return head;
        
        ListNode* temp=head;
        int totalNodes=0;
        
        while(temp!=NULL)//calcuate total nodes in LL
        {
            temp=temp->next;
            totalNodes++;
        }
        
        k=k%totalNodes; //if k>totalNodes then take mod to reduce redundant rotations 
        
        
        /*
        Now let x=totalNodes-k and then assign (x-1)th node next to NULL and then assign 
        next of last node of LL to head and rotation is done. 
        */
        if(k==0)
            return head;
        temp=head;
        ListNode* temp1=head;
        k=totalNodes-k;  
        while(--k)
            temp1=temp1->next;
        
        ListNode* temp2=temp1->next;
        temp1->next=NULL;
        temp1=temp2;
        while(temp2->next!=NULL)
            temp2=temp2->next;
        temp2->next=temp;
        return temp1;
        }
};