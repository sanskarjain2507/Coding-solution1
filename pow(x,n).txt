class Solution {
public:
    
    double mypow(double x,int n)
    {
      if(n==1)
            return x;
        
        if(n==0)
            return 1;
        else 
        {
            if(n%2==0)
            {
                double k=mypow(x,n/2);
                return k*k;
            }
            else
            {
                 double k=mypow(x,n/2);
                return k*k*x;
            }
        }
        
    }
    double myPow(double x, int n) {
       //use divide and conquer appraoch to solve this problem in lwess time complexity
        if(n<0)  //if n is -ve
       {
               return 1/(x*mypow(x,-(n+1)));  //to handle to case when n is -2^31 then 2^31 cannot be 
            //represented in double so to handle this case we multiply x and compute pow(x,(-(n+1))) 
            //which is same as x*mypow(x,-(-2^31+1)), which solves the problem 
           
       }
        else  //if n is positive
            return mypow(x,n);
       
    }
};