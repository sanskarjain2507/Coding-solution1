class Solution {
public:
    
    int unique_path(vector<vector<int>> &temp,int i,int j)
    {
            if(temp[i][j]!=0)  //if total unique paths is already calculated and present in array then just return them
                return temp[i][j];
            if(i==0 && j==0) //if it is starting of array then return 1
                return 1;
            else if(i==0 && j!=0) //if the cell is 1st row then return 1
            {
                return 1;
            }
            else if(i!=0 && j==0) //if the cell is in 1st coloumn then return 1
                return 1;
            else
            {
                //else first update the new unique path as the sum of unique paths as we come from top and left of cell
                temp[i][j]=unique_path(temp,i,j-1)+unique_path(temp,i-1,j);
                return temp[i][j]; //then return the unique path
            }
        
    }
    
    int uniquePaths(int m, int n) {
        vector<vector<int>> temp; //initialize a temporary array which stores the intermediate unique paths from starting point to that cell
        
        //now initialize the temp vector
        for(int i=0;i<m;i++)
        {
            vector<int> v(n,0);
            temp.push_back(v);
        }
        
       return unique_path(temp,m-1,n-1); //call unique_path which is dynamic programming approach to find the total unique path
    }
};