/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        //using O(1) space
        ListNode* temp1=list1;
        ListNode* temp2=list2;
        ListNode* t,*t1,*t2;
        
        if(list1==NULL) //if list1 is NULL then send list 2
            return list2;
        
        if(list2==NULL)//if list 2 is NULL then send list 1
            return list1;
        
        if(list1->val <list2->val) //now find the starting point of list which is samllest among the first nodes of two list
            t=list1;
        else   
            t=list2;
        
        while(temp1!=NULL && temp2!=NULL) //while both list are not NULL
        {
            
            if(temp1->val<temp2->val)  //if temp1 node is smaller
            {
                while(temp1->next!=NULL && temp1->next->val<temp2->val) //find the position in temp1 where the node of temp 2 need to be inserted
                        temp1=temp1->next;
                
                if(temp1->next==NULL)  //if it is the last node then just append list2 from node temp and return the starting point t.
                {
                    if(temp1->val<temp2->val)
                    {
                        temp1->next=temp2;
                        return t;
                    }
                }
                else //else append the temp2 node to temp1 
                {
                    t1=temp1->next;
                    t2=temp2->next;
                    temp1->next=temp2;
                    // temp2->next=t1;
                    if(t2==NULL) //if 2nd list next element is NULL then just append the remaining element of list1 to next of temp2 and return t
                    {
                        temp2->next=t1;
                        return t;
                    }
                        
                    temp1=t1; //increment 1st list
                    // temp2=t2; //does not increment 2nd list otherwise some nodes may be missed
                }
                
                
            }
            else //now do same thing symetrically if 2nd node value is small
            {

                while(temp2->next!=NULL && temp2->next->val<=temp1->val)
                    temp2=temp2->next;
                
                    if(temp2->next==NULL)
                    {
                        if(temp2->val<=temp1->val)
                        {
                            temp2->next=temp1;
                            return t;
                        }
                    }
                    else
                    {
                        t1=temp1->next;
                        t2=temp2->next;
                        temp2->next=temp1;
                        // temp1->next=t2;
                        if(t2==NULL)
                        {
                            temp1->next=t2;
                            return t;
                        }
                       
                        // temp1=t1;
                        temp2=t2;
                    }
            }

            
        }
        
        
        return t;
 
        
//the following solution is by using O(m+n) space
        // ListNode* temp1=list1;
        // ListNode* temp2=list2;
//         ListNode* t1,*t2;
//         // ListNode* temp3;
//         if(list1==NULL)
//             return list2;
        
//         if(list2==NULL)
//             return list1;
//         ListNode* temp3=new ListNode();  
//         int k;
//         if(list1->val<list2->val)
//             temp3->val=list1->val;
//         else
//             temp3->val=list2->val;
//         t1=temp3;
//         temp3->next=NULL;
        
//         while(list1!=NULL && list2!=NULL)
//         {
//             if(list1->val < list2->val)
//             {
//                 ListNode* t=new ListNode();
//                 t->val=list1->val;
//                 t->next=NULL;
//                 temp3->next=t;
//                 temp3=temp3->next;
//                 list1=list1->next;
//             }
//             else
//             {
//                 ListNode* t=new ListNode();
//                 t->val=list2->val;
//                 t->next=NULL;
//                 temp3->next=t;
//                 temp3=temp3->next;
//                 list2=list2->next;
//             }
//         }
        
//         while(list1!=NULL)
//         {
//             ListNode* t=new ListNode();
//             t->val=list1->val;
//             t->next=NULL;
//             temp3->next=t;
//             temp3=temp3->next;
//             list1=list1->next;
//         }
                
//         while(list2!=NULL)
//         {
//             ListNode* t=new ListNode();
//             t->val=list2->val;
//             t->next=NULL;
//             temp3->next=t;
//             temp3=temp3->next;
//             list2=list2->next;
//         }
                
                   
        
//         return t1->next;
    }
};