/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    //just reverse half list and then merge both list node by node
    ListNode* reverselist(ListNode* temp)
    {
        ListNode* temp1,*temp2,*temp3;
        temp2=NULL;
        while(temp!=NULL)
        {
            temp1=temp->next;
            temp->next=temp2;
            temp2=temp;
            temp=temp1;
            
        }
        return temp2;
    }
    
    void reorderList(ListNode* head) {
        
        int totalNodes=0;
        ListNode* temp=head;
        
        while(temp!=NULL)
        {
            temp=temp->next;
            totalNodes++;
        }
        
        int k=ceil(totalNodes/2);
        
        if(k==0)
            return;
        
        temp=head;
        while(--k)
            temp=temp->next;
        ListNode* temp1,*temp2,*temp3;
        temp1=reverselist(temp->next);
        temp->next=NULL;
        temp=head;
       
        
        
        
        while(temp->next!=NULL && temp1->next!=NULL)
        {
            temp2=temp->next;
            temp3=temp1->next;
            temp->next=temp1;
            temp1->next=temp2;
            temp=temp2;
            temp1=temp3;
            
        }
        
        if(temp->next==NULL)
            temp->next=temp1;
        else if(temp1->next==NULL)
        {
            temp1->next=temp->next;
            temp->next=temp1;
        }
        
        

        
        
    }
    
};