
void swap(vector<int> &nums,int i ,int j)
{
    int temp=nums[i];
    nums[i]=nums[j];
    nums[j]=temp;
}
void heapify(vector<int> &nums,int i,int s)
{
    int left=i*2+1;
    int right=i*2+2;
    int maxm;
    
    if(left<s && nums[i]<nums[left])
        maxm=left;
    else
        maxm=i;
    
    if(right<s && nums[maxm]<nums[right])
        maxm=right;
    
    if(i!=maxm)
    {
        swap(nums,i,maxm);
        heapify(nums,maxm,s);
    }
 }

void buildheap(vector<int> &nums,int s)
{
    for(int i=s/2;i>-1;i--)
        heapify(nums,i,s);
}

void heapsort(vector<int> &nums,int s)
{
    buildheap(nums,s);
    
    while(s--)
    {
        swap(nums,s,0);
        heapify(nums,0,s);
    }
}
vector<int> mergeKSortedArrays(vector<vector<int>>&kArrays, int k)
{
    vector<int> ans;
    for(int i=0;i<k;i++)
    {
        for(int j=0;j<kArrays[i].size();j++)
            ans.push_back(kArrays[i][j]);
     }
    int s=ans.size();
    heapsort(ans,s);
    return ans;
}
