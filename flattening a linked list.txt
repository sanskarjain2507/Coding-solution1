// { Driver Code Starts
#include <bits/stdc++.h>

struct Node{
	int data;
	struct Node * next;
	struct Node * bottom;
	
	Node(int x){
	    data = x;
	    next = NULL;
	    bottom = NULL;
	}
	
};

using namespace std;

void printList(Node *Node)
{
    while (Node != NULL)
    {
        printf("%d ", Node->data);
        Node = Node->bottom;
    }
}

Node* flatten (Node* root);

int main(void) {

	int t;
	cin>>t;
	while(t--){
    int n,m,flag=1,flag1=1;
    struct Node * temp=NULL;
	struct Node * head=NULL;
	struct Node * pre=NULL;
	struct Node * tempB=NULL;
	struct Node * preB=NULL;
		cin>>n;
        int work[n];
		for(int i=0;i<n;i++)
            cin>>work[i];
		for(int i=0;i<n;i++){
			m=work[i];
			--m;
			int data;
			scanf("%d",&data);
			temp = new Node(data);
			temp->next = NULL;
			temp->bottom = NULL;
			
			if(flag){
				head = temp;
				pre = temp;
				flag = 0;
				flag1 = 1;
			}
			else{
				pre->next = temp;
				pre = temp;
				flag1 = 1;
			}
			for(int j=0;j<m;j++){
				
				int temp_data;
				scanf("%d",&temp_data);
				tempB = new Node(temp_data);

				if(flag1){
					temp->bottom=tempB;
					preB=tempB;
					flag1=0;
				}
				else{
					preB->bottom=tempB;
					preB=tempB;
				}
			}
		}
		   Node *fun = head;
		   Node *fun2=head;

            Node* root = flatten(head);
            printList(root);
            cout<<endl;

	}
	return 0;
}
// } Driver Code Ends


/* Node structure  used in the program

struct Node{
	int data;
	struct Node * next;
	struct Node * bottom;
	
	Node(int x){
	    data = x;
	    next = NULL;
	    bottom = NULL;
	}
	
};
*/

/*  Function which returns the  root of 
    the flattened linked list. */
    
Node* mergelist(Node* list1,Node* list2)
{
    Node* temp1,*temp2,*temp3,*t1,*t2;
    
    
    if(list1->data<list2->data)
    {
        temp1=list1;
        temp2=list2;
        temp3=list1;
    }
    else
    {
        temp1=list2;
        temp2=list1;
        temp3=list2;
    }   
    while(temp1->bottom!=NULL && temp2->bottom!=NULL)
    {
        t1=temp1->bottom;
        t2=temp2->bottom;
        if(temp1->data<=temp2->data)
        {
            
            if(temp1->bottom->data>=temp2->data)
            {
                temp1->bottom=temp2;
                temp2->bottom=t1;
                temp1=temp1->bottom;
                temp2=t2;
            }
            else
            {
                temp1=temp1->bottom;
            }
        }
        else
        {
            temp1=temp1->bottom;
        }
    }
    
    if(temp1->bottom==NULL)
    {
       
            if(temp1->data<=temp2->data)
            {
                temp1->bottom=temp2;
                return temp3;
               
            }
        
    }
    
    if(temp2->bottom==NULL)
    {
        while(temp1->bottom!=NULL)
        {
            t1=temp1->bottom;
            t2=temp2->bottom;
            if(temp1->data<=temp2->data)
            {
                
                if(temp1->bottom->data>=temp2->data)
                {
                    temp1->bottom=temp2;
                    temp2->bottom=t1;
                    temp1=temp1->bottom;
                    temp2=t2;
                    return temp3;
                }
                else
                {
                    temp1=temp1->bottom;
                }
            }
            
        }
        temp1->bottom=temp2;
        return temp3;
    }
    return temp3;
    
    
    
}

Node *flatten(Node *root)
{
   if(root==NULL)
        return root;
    
    Node* temp1=root;
    Node* temp2,*temp3,*temp4,*temp5,*temp6;
    temp4=temp1;
    temp5=temp1;
    if(temp1->next==NULL)
        return temp1;
    temp1=temp1->next;
  
    while(temp1!=NULL) //just merge two linked lists at a time until every list is mergerd
    {
        temp2=temp1;
        temp4=mergelist(temp4,temp2);
        temp5->next=NULL;
        temp5=temp1;
        temp1=temp1->next;
    }
    
    return temp4;
    
}

