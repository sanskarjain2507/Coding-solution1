// { Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
/*You are required to complete this function*/

class Solution{
    public:
    int maxLen(vector<int>&A, int n)
    {   
        // Your code here
        
        /*
        The main intution is if we know the sum from index (0,j) =S and we know the sum from index (0,k)=S
        where 0<k<j so we will be sure that sum from index (k+1,j) is 0 as S+0=S;
        
        Now we will calculate sum and at each index if sum=0 then we will update maxlen to i+1 otherwise we will 
        check map and if sum is available then we update maxlen to max(maxlen,i-m[sum)) otherwise we will insert m[sum]=i and go ahead;
        
        */
        int sum=0;
        int len=0;
        map<int,int> m; //map stores the index of various sums at each index if the sum is not present already in hashmap
        for(int i=0;i<n;i++)
        {
            sum+=A[i]; 
            
            if(sum==0)
                len=i+1;
            else if(m.find(sum)!=m.end())
            {
                len=max(len,i-m[sum]);
            }
            else
            {
                m[sum]=i;
            }
        }
        
        return len;
      
        
    }
};


// { Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int m;
        cin>>m;
        vector<int> array1(m);
        for (int i = 0; i < m; ++i){
            cin>>array1[i];
        }
        Solution ob;
        cout<<ob.maxLen(array1,m)<<endl;
    }
    return 0; 
}


  // } Driver Code Ends